import random
import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.path import Path

cidades = [(0.014662405932192701, 0.839623643269997), (-0.802224871598876, 0.16503761424941366), (0.6639232116956406, -0.9221480293849091), (0.1423696905130134, -0.07722538363569265), (0.045072980868674284, 0.22711273134352816), (-0.2703900873133327, 0.4934366250350084), (0.09060895483422082, -0.2719627151012878), (0.46272078524413174, 0.5271442066296672), (-0.3610269314361154, -0.23772027061593626), (-0.696696967049035, 0.025399538265298505), (-0.05226618458388077, 0.03228509632658749), (0.20558989017820517, -0.8297625964430926), (-0.22742827248621733, 0.1436796490909853), (0.14766666068784384, 0.13713763436989335), (0.5421686698565, 0.5314101094820423), (0.8107117069916752, 0.591211019684871), (-0.8396964103745161, -0.8527875143444967), (0.8074012564600115, 0.5902395099381081), (-0.6528482013681141, -0.6105282385648212), (0.6082491431971728, -0.7111030229515136), (-0.6697844690240844, -0.9263532157213106), (-0.7260734061734202, -0.06155834763138568), (-0.6160655387357452, -0.06435497264687595), (-0.06006911597699727, -0.7364574540235267), (-0.8019623295595819, 0.47500817172624754), (0.4964784342399762, -0.248862797677595), (-0.4972216214454035, 0.05427372104893302), (-0.45073687990393196, 0.9440470283109252), (0.7863943313470627, 0.8762903666961341), (0.13648930843245344, -0.1566045957608031), (-0.3462827574550289, 0.5012731602032654), (0.39400367467903386, -0.6038848239009464), (-0.005082776004739387, -0.10867547751492279), (-0.7868010955481448, 0.16550613570087536), (0.03653171472044092, -0.7585482229775746), (0.44170483301727015, -0.26773878051435274), (0.4587909347087078, 0.7330745331715125), (0.1986754918292657, 0.4958917577616584), (0.48376629165774143, 0.2799716727772119), (0.282009995661882, 0.2516985632190121), (0.1317125534609791, 0.07085443127144875), (0.8821572971432472, -0.4971821444810738), (-0.7505635620278623, -0.8666040462172677), (0.6684358884628325, 0.750102613900582), (-0.20566526225162396, -0.5034918187447632), (0.523116381750981, 0.4681949355841697), (0.8223455585352779, 0.45019811655611974), (0.8440715667232808, -0.5621440988552937), (0.6615037778762065, -0.36901740810274375), (0.5923861460399249, -0.9143088828446992), (-0.3599749209084211, 0.09406556811232036), (0.6908456013046769, 0.7463007459787494), (0.791004955854369, 0.5786789754818724), (-0.8306410527103809, -0.16518147729923638), (0.680317623777591, 0.14075109164321153), (0.45363445667002855, -0.06653644589262386), (0.8043319735517285, 0.4331862978640981), (0.5652377438581888, -0.77490691221119), (0.06104688519948098, 0.1677900572019837), (0.3743714542332188, -0.8718339279402696), (0.062331274358869315, 0.08780477888735971), (0.1950733604662207, 0.30940416127267123), (-0.8265357843434333, 0.43232134513897846), (-0.5080748466330605, 0.5180500264638868), (-0.30709594802887197, 0.8101027191644625), (0.44007370928073364, 0.029417431460656784), (-0.41710040069182464, -0.8175435267787854), (-0.28756647971928095, -0.21500427952087264), (0.14899849459953507, -0.7734734206712004), (0.8784143817896577, -0.020904641999085483), (0.34058716685433676, 0.034192549976644004), (0.84227820237126, -0.9216477300656616), (0.7725238819878462, -0.5035095143034896), (-0.34011940797646467, -0.9775020001267405), (-0.4384799546199225, 0.9997903653781877), (-0.22687224867172318, 0.9733253033016833), (0.21420616500847323, 0.1740317097272408), (0.3898208402999066, -0.06211393714261315), (-0.18626946573630354, 0.0629349079267223), (0.42751712047808255, -0.4437957247845812), (-0.5421676711342014, 0.3419564859536517), (0.8434698998482271, 0.5748012269237399), (0.6881985562228414, 0.11902651359665484), (-0.2058092254453847, 0.9484935711960834), (-0.2142451089992783, 0.8505810661934206), (0.5744113480309272, -0.7229622242692122), (-0.3541562574971153, -0.5158699582353179), (-0.49081623083910575, 0.792468409764395), (0.11066171713847406, -0.25194558459242256), (-0.45269569793906506, -0.347064608316092), (-0.686758890561874, -0.18186169842796462), (0.16435135427624048, -0.5200808705658391), (-0.6244439870107319, -0.40317536271756227), (-0.9686842028210725, -0.01728947909105427), (0.5747850731225086, -0.34498359106024834), (0.26628692528469644, 0.8370019195521641), (-0.6815121946535783, -0.7812546832563445), (-0.5570940792639696, 0.9685771380972592), (-0.5848859538179245, -0.6037666688917334), (-0.39387664146349066, -0.8938335466617602)]

dists = []
for cidade1 in cidades:
    linha = []
    for cidade2 in cidades:
        dist = math.dist(cidade1, cidade2)
        linha.append(dist)
    dists.append(linha)

class Estado:
    def __init__ (self, caminho):
        self.caminho = caminho
        self.f = f(caminho)

def estado_inicial():
    ret = [x for x in range(len(cidades))]
    random.shuffle(ret)
    return Estado(ret)

def f(x):
    soma = 0
    for i in range(len(x) - 1):
        prox = (i+1)%len(cidades)
        cidade1 = x[i]
        cidade2 = x[prox]
        soma += dists[cidade1][cidade2]
    return soma

def muda(estado):
    caminho = estado.caminho.copy()
    i = random.randint(0, len(caminho) - 1)
    j = random.randint(0, len(caminho) - 1)
    i_ = min(i,j)
    j_ = max(i,j)

    for k in range((j_+1) - i_):
        i = i_ + k
        j = j_ - k
        aux = caminho[i]
        caminho[i] = caminho[j]
        caminho[j] = aux
        if (i >= j):
            break
    return Estado(caminho)

def vizinhos(estado):
    return [muda(estado) for _ in range(10)]

def melhor_vizinho(estado):
    estados = vizinhos(estado)
    return min(estados, key=lambda estado: estado.f)

def P(deltaE, T):
    return random.uniform(0, 1) < math.exp(deltaE/T)

T = 1000
atual = estado_inicial()

while (T > 0.001):
    T = 0.9995 * T
    vizinho = melhor_vizinho(atual)
    deltaE = atual.f - vizinho.f
    if (deltaE > 0 or P(deltaE,T)):
        atual = vizinho
        print(atual.f)

verts = []
for i in atual.caminho:
    verts.append(cidades[i])
verts.append(cidades[atual.caminho[0]])

codes = [Path.MOVETO] + 100*[Path.LINETO]

path = Path(verts, codes)

fig, ax = plt.subplots()
patch = patches.PathPatch(path, facecolor='orange', lw = 2)
ax.add_patch(patch)
ax.set_xlim(-1,1)
ax.set_ylim(-1,1)
plt.show()